// <auto-generated />
using System;
using BookStore.Models.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookStore.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20210918191545_AddDataBookAuthors")]
    partial class AddDataBookAuthors
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookStore.Models.Db.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Admin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Admin = true,
                            Login = "admin",
                            Password = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Admin = false,
                            Login = "seller1",
                            Password = "seller1"
                        });
                });

            modelBuilder.Entity("BookStore.Models.Db.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Marcel",
                            LastName = "Proust"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "James",
                            LastName = "Joyce"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Miguel",
                            LastName = "de Cervantes"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Gabriel",
                            LastName = "Márquez",
                            MiddleName = "García"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Francis",
                            LastName = "Fitzgerald",
                            MiddleName = "Scott"
                        },
                        new
                        {
                            Id = 6,
                            FirstName = "John",
                            LastName = "Tolkien",
                            MiddleName = "Ronald Reuel"
                        });
                });

            modelBuilder.Entity("BookStore.Models.Db.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int>("YearOfPublished")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasCheckConstraint("CK_Book_Pages", "[Pages] >=0");

                    b.HasCheckConstraint("CK_Book_YearOfPublished", "[YearOfPublished] >= 0 AND [YearOfPublished] <= YEAR(GETDATE())");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GenreId = 1,
                            Name = "In Search of Lost Time",
                            Pages = 4215,
                            PublisherId = 1,
                            YearOfPublished = 1922
                        },
                        new
                        {
                            Id = 2,
                            GenreId = 1,
                            Name = "Ulysses",
                            Pages = 730,
                            PublisherId = 2,
                            YearOfPublished = 1922
                        },
                        new
                        {
                            Id = 3,
                            GenreId = 2,
                            Name = "Don Quixote",
                            Pages = 845,
                            PublisherId = 3,
                            YearOfPublished = 1620
                        },
                        new
                        {
                            Id = 4,
                            GenreId = 3,
                            Name = "One Hundred Years of Solitude",
                            Pages = 624,
                            PublisherId = 4,
                            YearOfPublished = 1970
                        },
                        new
                        {
                            Id = 5,
                            GenreId = 4,
                            Name = "The Great Gatsby",
                            Pages = 749,
                            PublisherId = 5,
                            YearOfPublished = 1925
                        },
                        new
                        {
                            Id = 6,
                            GenreId = 5,
                            Name = "The Fellowship of the Ring",
                            Pages = 423,
                            PublisherId = 6,
                            YearOfPublished = 1954
                        },
                        new
                        {
                            Id = 7,
                            GenreId = 5,
                            Name = "The Two Towers",
                            Pages = 352,
                            PublisherId = 6,
                            YearOfPublished = 1954
                        },
                        new
                        {
                            Id = 8,
                            GenreId = 5,
                            Name = "The Return of the King",
                            Pages = 416,
                            PublisherId = 6,
                            YearOfPublished = 1955
                        });
                });

            modelBuilder.Entity("BookStore.Models.Db.BookAuthor", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BookAuthors");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            AuthorId = 1
                        },
                        new
                        {
                            BookId = 2,
                            AuthorId = 2
                        },
                        new
                        {
                            BookId = 3,
                            AuthorId = 3
                        },
                        new
                        {
                            BookId = 4,
                            AuthorId = 4
                        },
                        new
                        {
                            BookId = 5,
                            AuthorId = 5
                        },
                        new
                        {
                            BookId = 6,
                            AuthorId = 6
                        },
                        new
                        {
                            BookId = 7,
                            AuthorId = 6
                        },
                        new
                        {
                            BookId = 8,
                            AuthorId = 6
                        });
                });

            modelBuilder.Entity("BookStore.Models.Db.BookInStore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("getdate()");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("BookInStores");

                    b.HasCheckConstraint("CK_BookInStore_CostPrice", "[CostPrice] >= 0");

                    b.HasCheckConstraint("CK_BookInStore_Price", "[Price] >= 0");

                    b.HasCheckConstraint("CK_BookInStore_Amount", "[Amount] >= 0");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 5,
                            BookId = 1,
                            CostPrice = 254.2m,
                            DateAdded = new DateTime(2018, 9, 18, 22, 15, 44, 686, DateTimeKind.Local).AddTicks(3565),
                            Price = 350m
                        },
                        new
                        {
                            Id = 2,
                            Amount = 12,
                            BookId = 2,
                            CostPrice = 324.7m,
                            DateAdded = new DateTime(2020, 12, 18, 22, 15, 44, 689, DateTimeKind.Local).AddTicks(5604),
                            Price = 400m
                        },
                        new
                        {
                            Id = 3,
                            Amount = 24,
                            BookId = 3,
                            CostPrice = 128.6m,
                            DateAdded = new DateTime(2021, 8, 29, 22, 15, 44, 689, DateTimeKind.Local).AddTicks(5634),
                            Price = 200m
                        },
                        new
                        {
                            Id = 4,
                            Amount = 7,
                            BookId = 4,
                            CostPrice = 742.5m,
                            DateAdded = new DateTime(2021, 9, 14, 22, 15, 44, 689, DateTimeKind.Local).AddTicks(5646),
                            Price = 1000m
                        },
                        new
                        {
                            Id = 5,
                            Amount = 11,
                            BookId = 5,
                            CostPrice = 418.1m,
                            DateAdded = new DateTime(2021, 9, 18, 22, 15, 44, 689, DateTimeKind.Local).AddTicks(5651),
                            Price = 600m
                        },
                        new
                        {
                            Id = 6,
                            Amount = 14,
                            BookId = 6,
                            CostPrice = 251m,
                            DateAdded = new DateTime(2021, 9, 18, 22, 15, 44, 689, DateTimeKind.Local).AddTicks(5655),
                            Price = 325m
                        },
                        new
                        {
                            Id = 7,
                            Amount = 10,
                            BookId = 7,
                            CostPrice = 284m,
                            DateAdded = new DateTime(2021, 9, 10, 22, 15, 44, 689, DateTimeKind.Local).AddTicks(5659),
                            Price = 392m
                        },
                        new
                        {
                            Id = 8,
                            Amount = 15,
                            BookId = 8,
                            CostPrice = 327.6m,
                            DateAdded = new DateTime(2021, 9, 10, 22, 15, 44, 689, DateTimeKind.Local).AddTicks(5663),
                            Price = 450m
                        });
                });

            modelBuilder.Entity("BookStore.Models.Db.BookReserve", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("BookInStoreId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateReserve")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BookInStoreId");

                    b.ToTable("BookReserves");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 2,
                            BookInStoreId = 1,
                            DateReserve = new DateTime(2021, 9, 16, 22, 15, 44, 689, DateTimeKind.Local).AddTicks(6913)
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 2,
                            BookInStoreId = 3,
                            DateReserve = new DateTime(2021, 9, 17, 22, 15, 44, 689, DateTimeKind.Local).AddTicks(7243)
                        });
                });

            modelBuilder.Entity("BookStore.Models.Db.BookSeries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("BookSerieses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "The Lord of the Rings"
                        });
                });

            modelBuilder.Entity("BookStore.Models.Db.BookSeriesBook", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("BookSeriesId")
                        .HasColumnType("int");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.HasKey("BookId", "BookSeriesId");

                    b.HasIndex("BookSeriesId");

                    b.ToTable("BookSeriesBooks");

                    b.HasData(
                        new
                        {
                            BookId = 6,
                            BookSeriesId = 1,
                            Position = 1
                        },
                        new
                        {
                            BookId = 7,
                            BookSeriesId = 1,
                            Position = 2
                        },
                        new
                        {
                            BookId = 8,
                            BookSeriesId = 1,
                            Position = 3
                        });
                });

            modelBuilder.Entity("BookStore.Models.Db.BookSold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("BookInStoreId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateSold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("getdate()");

                    b.Property<decimal>("SoldPrice")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BookInStoreId");

                    b.ToTable("BookSolds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 2,
                            BookInStoreId = 2,
                            DateSold = new DateTime(2021, 6, 18, 22, 15, 44, 689, DateTimeKind.Local).AddTicks(8712),
                            SoldPrice = 400m
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 2,
                            BookInStoreId = 4,
                            DateSold = new DateTime(2021, 9, 6, 22, 15, 44, 689, DateTimeKind.Local).AddTicks(9043),
                            SoldPrice = 1000m
                        },
                        new
                        {
                            Id = 3,
                            AccountId = 2,
                            BookInStoreId = 5,
                            DateSold = new DateTime(2021, 9, 13, 22, 15, 44, 689, DateTimeKind.Local).AddTicks(9055),
                            SoldPrice = 600m
                        });
                });

            modelBuilder.Entity("BookStore.Models.Db.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Modernist"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Novel"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Magic realism"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Tragedy"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Fantasy"
                        });
                });

            modelBuilder.Entity("BookStore.Models.Db.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Grasset and Gallimard"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Shakespeare and Company"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Francisco de Robles"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Editorial"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Charles Scribner's Sons"
                        },
                        new
                        {
                            Id = 6,
                            Name = "George Allen & Unwin"
                        });
                });

            modelBuilder.Entity("BookStore.Models.Db.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookInStoreId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("date");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(4,2)");

                    b.HasKey("Id");

                    b.HasIndex("BookInStoreId");

                    b.ToTable("Stocks");

                    b.HasCheckConstraint("CK_Stock_Discount", "[Discount] > 0 AND [Discount] <= 100.0");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookInStoreId = 3,
                            DateEnd = new DateTime(2021, 10, 8, 22, 15, 44, 690, DateTimeKind.Local).AddTicks(519),
                            DateStart = new DateTime(2021, 9, 13, 22, 15, 44, 690, DateTimeKind.Local).AddTicks(193),
                            Discount = 15m
                        });
                });

            modelBuilder.Entity("BookStore.Models.Db.Book", b =>
                {
                    b.HasOne("BookStore.Models.Db.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStore.Models.Db.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("BookStore.Models.Db.BookAuthor", b =>
                {
                    b.HasOne("BookStore.Models.Db.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStore.Models.Db.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookStore.Models.Db.BookInStore", b =>
                {
                    b.HasOne("BookStore.Models.Db.Book", "Book")
                        .WithMany("BookInStores")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookStore.Models.Db.BookReserve", b =>
                {
                    b.HasOne("BookStore.Models.Db.Account", "Account")
                        .WithMany("BookReserves")
                        .HasForeignKey("AccountId");

                    b.HasOne("BookStore.Models.Db.BookInStore", "BookInStore")
                        .WithMany("BookReserves")
                        .HasForeignKey("BookInStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("BookInStore");
                });

            modelBuilder.Entity("BookStore.Models.Db.BookSeriesBook", b =>
                {
                    b.HasOne("BookStore.Models.Db.Book", "Book")
                        .WithMany("BookSeriesBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStore.Models.Db.BookSeries", "BookSeries")
                        .WithMany("BookSeriesBooks")
                        .HasForeignKey("BookSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("BookSeries");
                });

            modelBuilder.Entity("BookStore.Models.Db.BookSold", b =>
                {
                    b.HasOne("BookStore.Models.Db.Account", "Account")
                        .WithMany("BookSolds")
                        .HasForeignKey("AccountId");

                    b.HasOne("BookStore.Models.Db.BookInStore", "BookInStore")
                        .WithMany("BookSolds")
                        .HasForeignKey("BookInStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("BookInStore");
                });

            modelBuilder.Entity("BookStore.Models.Db.Stock", b =>
                {
                    b.HasOne("BookStore.Models.Db.BookInStore", "BookInStore")
                        .WithMany("Stocks")
                        .HasForeignKey("BookInStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookInStore");
                });

            modelBuilder.Entity("BookStore.Models.Db.Account", b =>
                {
                    b.Navigation("BookReserves");

                    b.Navigation("BookSolds");
                });

            modelBuilder.Entity("BookStore.Models.Db.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("BookStore.Models.Db.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("BookInStores");

                    b.Navigation("BookSeriesBooks");
                });

            modelBuilder.Entity("BookStore.Models.Db.BookInStore", b =>
                {
                    b.Navigation("BookReserves");

                    b.Navigation("BookSolds");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("BookStore.Models.Db.BookSeries", b =>
                {
                    b.Navigation("BookSeriesBooks");
                });

            modelBuilder.Entity("BookStore.Models.Db.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookStore.Models.Db.Publisher", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
